---
description: 
globs: 
alwaysApply: false
---
# StompBoard 3D Pedal Modeling Agent

## Project Overview
This project creates simple 3D models of guitar pedals in JSON format for use with Three.js. The agent's job is to help create and manage these 3D models using a simple but effective JSON-based format.

## Git Commit Guidelines
**ALL git commits MUST use conventional commit format:**
- Format: `type(scope): description`
- Types: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`
- Examples:
  - `feat(3d): add simple box geometry for guitar pedals`
  - `fix(models): correct dimensions for Walrus Audio pedals`
  - `docs(readme): update 3D modeling instructions`

## 3D Model JSON Format

### Simple 3D Model Schema
```json
{
  "name": "string",
  "type": "box" | "cylinder" | "compound",
  "dimensions": {
    "width": "number (mm)",
    "height": "number (mm)", 
    "depth": "number (mm)"
  },
  "position": {
    "x": "number",
    "y": "number", 
    "z": "number"
  },
  "rotation": {
    "x": "number (radians)",
    "y": "number (radians)",
    "z": "number (radians)" 
  },
  "color": "hex color string",
  "material": {
    "type": "basic" | "standard" | "physical",
    "roughness": "number (0-1)",
    "metalness": "number (0-1)",
    "opacity": "number (0-1)"
  },
  "components": [
    {
      "name": "string",
      "type": "box" | "cylinder" | "plane",
      "dimensions": "object",
      "position": "object",
      "rotation": "object",
      "color": "string",
      "material": "object"
    }
  ]
}
```

### Guitar Pedal Reference Dimensions
Based on Walrus Audio pedal specs:
- Standard size: 121mm (L) x 66mm (W) x 41mm (H)
- Large size: 122mm (L) x 74mm (W) x 59mm (H) 

### Component Types
- **Main Body**: Primary pedal enclosure
- **Footswitch**: Clickable switch (typically 12mm diameter cylinder)
- **Knobs**: Control knobs (typically 6-8mm diameter cylinders)
- **Jacks**: Input/output jacks (6.35mm diameter cylinders)
- **LED**: Status indicator (2mm diameter cylinder)
- **Label**: Text area (flat plane)

## TypeScript Integration

### Model Loader Interface
```typescript
interface PedalModel3D {
  name: string;
  slug: string;
  modelData: ModelJSON;
}

interface Three3DScene {
  loadPedalModel(modelPath: string): THREE.Group;
  createPedalFromJSON(modelData: ModelJSON): THREE.Group;
  renderPedalBoard(pedals: PedalModel3D[]): void;
}
```

### Required Dependencies
- Three.js for 3D rendering
- TypeScript for type safety
- Existing React app structure

## File Structure
```
/src
  /models
    /pedals
      boss-sy-1.json
      walrus-audio-arp-87.json
      [other-pedals].json
  /utils
    model-loader.ts
    three-helpers.ts
  /components
    PedalBoard3D.tsx
    PedalModel3D.tsx
```

## Agent Goals
1. Create a TypeScript script to generate simple pedal models
2. Use actual pedal dimensions from specs
3. Generate JSON models for all existing pedals
4. Create Three.js loader utilities
5. Implement 3D pedal board scene
6. Ensure models are simple but visually recognizable

## Development Rules
- Keep 3D models simple (boxes, cylinders, basic shapes)
- Use realistic proportions based on actual pedal specs
- JSON format should be easily readable and editable
- TypeScript interfaces must be strictly typed
- All commits must follow conventional commit format
- Focus on functionality over visual complexity


